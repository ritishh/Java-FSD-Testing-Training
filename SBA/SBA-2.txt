1) Create an arraylist of user-defined data type Book. it should have:-
i)Name of the Book
ii)Author of the book
iii)year of publication of the book
iV)numer of copies sold.
sort the array list based on the year of publication.*/

import java.util.ArrayList;
import java.util.Collections;

class Book implements Comparable {
    String Name;
    String Author;
    Integer Year;
    int Copies;

    Book(String name, String author, int year, int copies) {
        this.Name = name;
        this.Author = author;
        this.Year = year;
        this.Copies = copies;
    }

    public int getYear() {
        return this.Year;
    }

    @Override
    public int compareTo(Object o) {
        Book b1 = (Book) o;
        return (this.Year.compareTo(b1.getYear()));
    }
}

public class ArrListUserDefined {
    public static void main(String[] args) {
        ArrayList<Book> BookList = new ArrayList<Book>();
        Book b1 = new Book("Computer Networks", "Leo Tolstoy", 1869, 5061570);
        Book b2 = new Book("Harry Potter and the Deathly Hallows", "J.K.Rowling", 2007, 4475152);
        Book b3 = new Book("A Tale of Two Cities", "Charles Dickens", 1859, 2000000);
        Book b4 = new Book("And Then There Were None", "Agatha Christie", 1939, 1000000);
        Book b5 = new Book("The Alchemist", "Paulo Coelho", 1988, 650000);
        Book b6 = new Book("Charlotte's Web", "E.B.White", 1952, 50000);

        BookList.add(b1);
        BookList.add(b2);
        BookList.add(b3);
        BookList.add(b4);
        BookList.add(b5);
        BookList.add(b6);

        System.out.println("--------------------------- Original Booklist ------------------------------");
        for (Book b : BookList) {
            System.out.println(b.Name + " -- " + b.Author + " -- " + b.Year + " -- " + b.Copies);
        }
        System.out.println("----------------------------------------------------------------------------");

        Collections.sort(BookList, Collections.reverseOrder()); // Sorted based on year (latest to oldest)

        System.out.println("--------------------------- Booklist Sorted by year ------------------------------");
        for (Book b : BookList) {
            System.out.println(b.Name + " -- " + b.Author + " -- " + b.Year + " -- " + b.Copies);
        }
        System.out.println("----------------------------------------------------------------------------");
    }
}

//output
/*--------------------------- Original Booklist ------------------------------
Computer Networks -- Leo Tolstoy -- 1869 -- 5061570
Harry Potter and the Deathly Hallows -- J.K.Rowling -- 2007 -- 4475152
A Tale of Two Cities -- Charles Dickens -- 1859 -- 2000000
And Then There Were None -- Agatha Christie -- 1939 -- 1000000
The Alchemist -- Paulo Coelho -- 1988 -- 650000
Charlotte's Web -- E.B.White -- 1952 -- 50000
----------------------------------------------------------------------------
--------------------------- Booklist Sorted by year ------------------------------
Harry Potter and the Deathly Hallows -- J.K.Rowling -- 2007 -- 4475152
The Alchemist -- Paulo Coelho -- 1988 -- 650000
Charlotte's Web -- E.B.White -- 1952 -- 50000
And Then There Were None -- Agatha Christie -- 1939 -- 1000000
Computer Networks -- Leo Tolstoy -- 1869 -- 5061570
A Tale of Two Cities -- Charles Dickens -- 1859 -- 2000000
----------------------------------------------------------------------------*/

2) Write a program to create, write and read from a file.


import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;

public class CreateFile {
	public static void main(String[] args) {
        try{
            // Create new file
            String content = "This is the content to write into create file";
            String path="F:\\a\\hi.txt";
            File file = new File(path);

            // If file doesn't exists, then create it
            if (!file.exists()) {
                file.createNewFile();
            }

            FileWriter fw = new FileWriter(file.getAbsoluteFile());
            BufferedWriter bw = new BufferedWriter(fw);

            // Write in file
            bw.write(content);

            // Close connection
            bw.close();
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
}

import java.io.File; 

class Fileinfo {  
    public static void main(String[] args) {  
        // Creating file object  
        File f1 = new File("F:FileOperationExample.txt");  
        if (f1.exists()) {  
            // Getting file name  
            System.out.println("The name of the file is: " + f1.getName());  
   
            // Getting path of the file   
            System.out.println("The absolute path of the file is: " + f1.getAbsolutePath());     
   
            // Checking whether the file is writable or not  
            System.out.println("Is file writeable?: " + f1.canWrite());    
   
            // Checking whether the file is readable or not  
            System.out.println("Is file readable " + f1.canRead());    
   
            // Getting the length of the file in bytes  
            System.out.println("The size of the file in bytes is: " + f1.length());    
        } else {  
            System.out.println("The file does not exist.");  
        }  
    }  
}  

import java.io.IOException;
	import java.io.FileReader;

	public class FileReader1 {

		

		public static void main(String[] args) 
		{
			try {
				int i;
				FileReader fr = new FileReader("F:file" );
				while((i = fr.read()) != -1)
				{
					System.out.print((char)i);
				}
				fr.close();
			}catch(IOException e) {
				System.out.println(e);
			}
		}

	}


